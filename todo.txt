
goals for 0.5.0:
       - better testing setup
              - implement mocking (with a type alias) of the platform
              - some way to test with actual webpage examples in files
              - make parse tests nicer by comparing json
                     - this works, but we need to make a generic function so we can have a nice way of having many tests
       - BUG: when you go to a page with a lot of paragraphs, selection does not work correct, when in between paragraps, paragraphs below get selected
       - I need to think about where I want to introduce the platform. Now its a bit messy, since to measure font size we need the platform, therefore needing it
              in layout. Or do we accept that and just get better at mocking?
                     -> use lazy_static , but figure out mocking for tests
       - fix whitespace
              on https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Whitespace:
                     In the case of HTML, whitespace is largely ignored â€” whitespace in between words is treated as a single character,
                     and whitespace at the start and end of elements and outside elements is ignored.
       - add col and row span to tables:
              - we now store a width and height on the cell's
                     - this means we should probably stop using cells in order (because the order is not really that linear anymore), switch to slot iteration (x,y)
                            - we probably need to keep a list of minimal and optimal sizes for each column and each row, and update them for every cell
                                   - a cell might span multiple rows and/or columns, so we need to each time update them such that the full cell will fit
                                          - I think I still actually only need to track columns for the inital 2 passes, and then do height only in the
                                            last pass.
                                   - in the final grid, there will be unoccupied spaces. check the spec and make sure the layout compute can handle that

              plan:


              DONE step 1) build
                     - for rowspan in table build, I can just occupy the slots, and then we only distribute the next rows over the free slots
                     - check that table dimensions are set correctly (slots can be added while building because of spans)


              DONE step 2) make layout not crash
                     - make sure it iterates over the whole range of slots , and does "something" for each slot (checking if something is anchored there)


              step 3) take rowspan into account in table build
                     - set correct dimensions on cell, and expand the can_fit logic


              step 4) include colspan in row width calc

                     for cell_x , cell_y, if a node is anchored here {
                            //compute both sizes (min and optimal)
                            //check width of node, find current min and optimal for that amount of cols from current col
                                   // if not enough: increase each touched column with (missing_width / nr_columns)
                     }

              step 5) include rowspan in the layout algo

                     for cell_x , cell_y, if a node is anchored here {
                            //given the already known widths, format the node, store the height.

                            //TODO: we need to know where to start each row. So for that, keep a list in which the minmal starting point
                            //      is tracked for each row? (with rowspan, just update the one "height" further down?)
                            //           (double check what the reference here then is, can't be height per row, so needs to be absolute positioning)
                     }
              
              step 6) move the table only functions to their own module






other things (later versions):
       - fix transparancy in png's (loading works, rendering in SDL does not)
       - figure out how do build standalone binaries
       - implement cookies
       - vertical scroll
